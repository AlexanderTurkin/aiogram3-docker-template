services:
  bot:
    build: ./telegram_bot
    container_name: telegram_bot
    restart: always
    env_file:
      - .env
    depends_on:
      - pgbouncer
      - redis
    networks:
      - app

  fastapi:
      build: ./fastapi
      command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
      ports:
        - 8000:8000
      networks:
        - app

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA='/var/lib/postgresql/data/pgdata'
    networks:
      - app
    volumes:
      - postgres-data:/var/lib/postgresql/data

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    restart: always
    env_file:
      - .env
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASS}
      - DB_HOST=postgres
      - POOL_MODE=session
      - MAX_DB_CONNECTIONS=0
      - DEFAULT_POOL_SIZE=40
      - ADMIN_USERS=postgres,${DB_USER}
      - AUTH_TYPE=scram-sha-256
    ports:
      - ${DB_PORT}:${DB_PORT}
    depends_on:
      - postgres
    networks:
      - app

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - app

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - app
    volumes:
      - redis-data:/bitnami/redis/data

  nginx:
    build: .
    image: umputun/nginx-le:latest
    hostname: nginx
    restart: always
    container_name: nginx
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - app
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/nginx_config.conf:/etc/nginx/service.conf
    ports:
      - "80:80"
      - "443:443"

    environment:
      - LETSENCRYPT=true
      - LE_EMAIL=test@mail.ru
      - LE_FQDN=${MAIN_WEBHOOK_ADDRESS}

networks:
  app:
    driver: bridge

volumes:
  postgres-data: {}
  redis-data: {}